% Homework MATLAB template file
% Your main file should be named "solution.m" and it should be saved as UTF-8 file.

function [consoleout, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] = solution()
 [consoleout, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] = evalc('student_solution()'); 
end

function [A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] = student_solution()
    % your solution code goes here
    
    % Part 1. Consider the ODE
    % solve numerically using forward Euler method
    y0 = pi/sqrt(2);
    delt = [2E-2, 2E-3, 2E-4, 2E-5, 2E-6, 2E-7, 2E-8];
    
    for i = 1:length(delt)
        tspan = 0:delt(i):5;

        solution = pi*exp(3*cos(tspan-1))/sqrt(2);
        num_solve = forwardeuler(@ode_function, tspan, y0, delt(i));
        err(i) = mean(abs(solution-num_solve));
    end
    
    for i = 1:length(delt)
        tspan = 0:delt(i):5;
        
        solution = pi*exp(3*cos(tspan-1))/sqrt(2);
        num_solveh = heuns(@ode_function, tspan, y0, delt(i));
        errh(i) = mean(abs(solution-num_solveh));
    
    
    L = polyfit(log(delt), log(err),1);
    Lh = polyfit(log(delt), log(errh),1);
    
    % assign variables (Forward Euler)
    A1 = num_solve'; 
    A2 = err;
    A3 = L(1);
   
    % assign variables (Heun's)
    A4 = num_solveh';
    A5 = errh;
    A6 = Lh(1);
    
    % Part 2. Consider the van der Pol oscillator
    
    % solve using set of conditions 1 for ode45, ode23, and ode113
    epsilons = [0.1 1 20];
    tspan = 0:0.5:32;
    y = zeros(1,length(tspan));
    y1n = sqrt(3);
    y2n = 1;
    
    for e = 1:length(epsilons)
        solved(:,e) = ode45( @(t,y) vanderPol(t,y,epsilons(e)), tspan, [y1n, y2n]);
    end 
 
    % assign variable
    A7 = [solved(1).y(1,:); solved(2).y(1,:); solved(3).y(1,:)]';
    
    % solve using set of conditions 2 for the same set of ode solvers
    tstart = 0;
    tend = 32;
    y1n = 2;
    y2n = pi^2;
    y0 = [y1n, y2n];
    
    epsilon = 1;
    tols = [10E-4, 10E-5, 10E-6, 10E-7, 10E-8, 10E-9, 10E-10];
    
    for j = 1:length(tols)
        options = odeset('AbsTol', tols(j), 'RelTol', tols(j));
        [T45,Y45] = ode45( @(t,y) vanderPol(t,y,epsilon), [tstart tend], y0, options);
        [T23,Y23] = ode23( @(t,y) vanderPol(t,y,epsilon), [tstart tend], y0, options);
        [T113,Y113] = ode113( @(t,y) vanderPol(t,y,epsilon), [tstart tend], y0, options);
        
        step45(j) = mean(diff(T45));
        step23(j) = mean(diff(T23));
        step113(j) = mean(diff(T113));
        
    end 
    
    L45 = polyfit(log(step45), log(tols), 1);
    L23 = polyfit(log(step23), log(tols), 1);
    L113 = polyfit(log(step113), log(tols), 1); 
    
    % assign variables
    A8 = L45(1);
    A9 = L23(1);
    A10 = L113(1);
    
    
    % Part 3. Fitzhugh neurons
    
    a = [0.05, 0.25];
    b = 0.01;
    c = b; 
    d_list = [0, 0; 0, 0.2; -0.1,0.2;-0.3,0.2;-0.5,0.2];
    I = 0.1;
    
    y0 = [0.1, 0.1, 0, 0];
    tspan = 0:0.5:100;
    
    for k = 1:size(d_list,1)
        [t,y] = ode15s( @(t,y) fitzhugh(t,y,a,b,c,d_list(k,:),I),tspan,y0);
        sols(:,:,k) = y;
    end 
    
    % assign variables
    A11 = squeeze(sols(:,:,1));
    A12 = squeeze(sols(:,:,2));
    A13 = squeeze(sols(:,:,3));
    A14 = squeeze(sols(:,:,4));
    A15 = squeeze(sols(:,:,5));

end

% your extra functions, if you need them, can be in another files (don't forget to upload them too!)